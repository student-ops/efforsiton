generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  refresh_token     String?
  access_token      String? @unique
  expires_at        Int?
  id_token          String?
  provider          String
  providerAccountId String  @unique
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  expires      DateTime
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?    @unique
  email         String?    @unique
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  project       Projects[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tasks {
  id          String    @id @default(cuid())
  parentId    String?
  belongs     String
  belongsTo   Projects  @relation(fields: [belongs], references: [id], onDelete: Cascade)
  name        String
  createdAt   DateTime  @default(now())
  acheived    Boolean   @default(false)
  description String?
  acheivedAt  DateTime?
  sugested Boolean @default(false)
}

model Projects {
  id          String        @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime      @default(now())
  linked      String?
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Tasks[]
  webhooks    Webhook[]
}


model Webhook {
  id            String          @id @default(cuid())
  repo_name     String
  owner         String
  belongs       String          @unique
  belongsTo     Projects        @relation(fields: [belongs], references: [id], onDelete: Cascade)
  webhookpushed WebhookCommit[]
}

model WebhookCommit {
  id        String  @id @default(cuid())
  belongs   String
  timestamp String
  after_sha String
  comment   String
  checked   Boolean @default(false)
  belongsTo Webhook @relation(fields: [belongs], references: [id], onDelete: Cascade)
}
